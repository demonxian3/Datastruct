关键路径

  AOE(Activity On Edges Network)
  带权有向无环图的一个应用：弧表示一个工程的活动，边上的权值表示活动持续
  的时间，每个顶点表示事件，AOE除了要考虑各个子工程的优先顺序，还关心完成
  整个工程所需要的最短时间是多少，哪些活动延期会影响整个工程的进度，加速
  这些活动是否会提高整个工程完成的时间。


  AOE性质：
    1只有在某个顶点所代表的事件发生后，以该点出发的各个弧代表的活动才能开始
    2只有在进入某个点的所有弧代表的活动都结束，该点代表的事件才可以发生

    若使用AOE代表一个工程，因为整个工程只有一个开始点和结束点，正常情况下
    网中只有一个入度为0的顶点(源点) 和 一个出度为0的顶点(汇点)
    它们标记着工程的开始和结束。


  相关概念：
    事件最早发生时间Ve(j)：
      Ve(j)指从源点到vj点的最大路径长度，这个时间决定了从各个顶点发出
      的所有弧所有活动能够开工的最早时间，根据性质2，可以知道vj最早开工
      时间等于所有前驱节点最早开工时间加上其与顶点vj之间的开销中的最大
      值，而工程的源点最早发生时间定义为0，因此得出：

           Ve(0) = 0;
           Ve(j) = Max{ Ve(i) + dut<i,j> }         <i,j> ∈ T

      取最大值是因为，只要前驱事件有一个未完成，事件j就不能开始，
      因此必须等所有活动都完成，也就是取花费最长时间的活动的值
      这个最长时间除了考虑活动耗费的时间，也需要考虑前驱事件最早
      开始的时间。有迭代的意思。集合T代表以j为弧尾的所有顶点。


    事件最晚发生时间Vl(i)：
      Vl(i)指在不推迟整个工期前提下，事件vi允许的最晚发生时间。
      根据性质1，为保证不推迟整个工期，因此vi事件最晚发生的时间
      等于该事件所有后继事件vj允许最晚开工的时间减去<vi,vj>活动
      所消耗的时间中的最小值，另外当整个工程每一事件都是以最早时间
      开工，那么汇点的最早完成时间也是汇点的最晚完成时间。

           Vl(n) = Ve(n);        n表示汇点
           Vl(i) = Min{ Vl(i) - dut<i,j> }	   <i,j> ∈ S

      因为汇点最早发生的时间，也是整个工程所允许的最大时间，为了
      不超过这个时间，因此可以通过这个时间减去活动消耗的时间来逆
      推前驱节点允许的最晚时间，如果多个事件逆推到同一个前驱事件
      那么取这些事件的最小值，因为如果取事件的较大值，会导致最小值
      对应的事件超出时间。S集合表示以i为弧头的所有顶点。

    活动ak最早开始时间e(k)
      根据性质1只有事件vi发生了，ak才可以开始施工。
        
           e(k) = Ve(i);


    活动ak最晚开始时间l(k)
      因为ak最晚开始时间要保证vj最晚发生时间不拖后
  
           l(k) = Vl(j) - dut<i,j> ;

    关键路径：
      当活动ak 的 l(k) == e(k) 那么活动ak是关键路径
      当活动ak 的 l(k) >= e(k) 那么活动ak有l(k)-e(k)的时间余量可以延后

  算法求解思路：
    1对顶点进行拓扑排序，求每个事件的最早发生时间
    2按逆拓扑顺序，求每个事件的最迟发生时间
    3计算每个活动ak的最早发生时间和最迟发生时间
    4找到时间余量为0的关键活动，称为关键路径


参照图 sample.png 计算图的AOE序列


求Ve:  
Ve(1) = 0				#源点
Ve(2) = Ve(1)+dut(<1,2>) = 6
Ve(3) = Ve(1)+dut(<1,3>) = 4
Ve(4) = Ve(1)+dut(<1,4>) = 5
Ve(5) = max{ Ve(2)+dut(<2,5>),Ve(3)+dut(<3,5>) } = max{ 7,5 } = 7
Ve(6) = Ve(4)+dut(<4,6>) = 7
Ve(7) = Ve(5)+dut(<5,7>) = 16
Ve(8) = max{ Ve(5)+dut(<5,8>),Ve(6)+dut(<6,8>) } = max{ 14,11 } = 14
Ve(9) = max{ Ve(7)+dut(<7,9>),Ve(8)+dut(<8,9>) } = max{ 18,18 } = 18

求Vl:
Vl(9) = 18
Vl(8) = Vl(9) - dut(<8,9>) = 14
Vl(7) = Vl(9) - dut(<7,9>) = 16
Vl(6) = Vl(8) - dut(<6,8>) = 10
Vl(5) = min{ Vl(7)-dut(<5,7>),Vl(8)-dut(<5,8>) } = min{ 7,7 } = 7
Vl(4) = Vl(6) - dut(<4,6>) = 8
Vl(3) = Vl(5) - dut(<3,5>) = 6
Vl(2) = Vl(5) - dut(<2,5>) = 6
Vl(1) = min{ Vl(2)-dut(<1,2>),Vl(3)-dut(<1,3>),Vl(4)-dut(<1,4>) } = min { 0,2,3 } = 0

求Ae: x = Ve(i)
e(1)  = 0
e(2)  = 0
e(3)  = 0
e(4)  = 6
e(5)  = 4
e(6)  = 5
e(7)  = 7
e(8)  = 7
e(9)  = 7
e(10) = 16
e(11) = 14


求Al: x = Vl(j) - dut(<i,j>)
l(11) = 14
l(10) = 16
l(9)  = 10
l(8)  = 7
l(7)  = 7
l(6)  = 8
l(5)  = 6
l(4)  = 6
l(3)  = 3
l(2)  = 2
l(1)  = 0

对比
    0  = e(1):l(1) =  0     X
    0  = e(2):l(2) =  2     
    0  = e(3):l(3) =  3     
    6  = e(4):l(4) =  6     X
    6  = e(5):l(5) =  6     
    5  = e(6):l(6) =  8     
    7  = e(7):l(7) =  7     X
    7  = e(8):l(8) =  7     X
    7  = e(9):l(9) =  10    
   16  = e(A):l(A) =  16    X
   14  = e(B):l(B) =  14    X


input:
0,1,6
0,2,4
0,3,5
1,4,1
2,4,1
3,5,2
4,6,9
4,7,7
5,7,4
6,8,2
7,8,4



关键路径：

   [1] --a1--> [2] --a4--> [5] --a7--> [7] --a10-> [9]

   [1] --a1--> [2] --a4--> [5] --a8--> [8] --a11-> [9]























